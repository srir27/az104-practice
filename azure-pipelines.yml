---

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  - group: backendconfigs

stages:
##########################################
###         STAGE 1: PLAN             ###
##########################################
  - stage: PlanStage
    jobs:
      - job: TerraformPlan
        steps:
          - task: TerraformInstaller@1
            displayName: Install
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTask@5
            displayName: Init
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendAzureRmUseEntraIdForAuthentication: false
              backendServiceArm: 'az104-practice'
              backendAzureRmResourceGroupName: $(resource_group)
              backendAzureRmStorageAccountName: $(storage_account)
              backendAzureRmContainerName: $(container)
              backendAzureRmKey: $(key)
              backendAzureRmUseCliFlagsForAuthentication: false
          - task: TerraformTask@5
            displayName: Plan
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: $(System.DefaultWorkingDirectory)
              commandOptions: '-out=tfplan' #Generate tfplan file
              environmentServiceNameAzureRM: 'az104-practice'

          # Publishing the entire working directory
          - publish: $(System.DefaultWorkingDirectory)
            artifact: tfplan-artifacts

##########################################
###         STAGE 2: APPLY             ###
##########################################
  - stage: ApplyStage
    dependsOn: PlanStage
    condition: succeeded()
    jobs:
      - deployment: ManualApproval 
        displayName: TerraformApply
        environment: approval-env # Environment that is created in UI
        strategy:
          runOnce:
            deploy:
              steps:
                - task: TerraformInstaller@1
                  displayName: Install
                  inputs:
                    terraformVersion: 'latest'
                
                # Downloading the tfplan-artifacts file into $(Pipeline.Workspace)
                - download: current
                  artifact: tfplan-artifacts
                - script: terraform apply tfplan --auto-approve
                  displayName: Apply
                  workingDirectory: '$(Pipeline.Workspace)/tfplan-artifacts' ##

